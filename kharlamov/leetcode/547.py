class Solution:
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        n = len(isConnected)  # Получаем количество городов (узлов) в графе
        # Инициализируем родителей и ранги для каждого узла
        parent = [i for i in range(n)]  # Изначально каждый узел является своим собственным родителем
        rank = [0] * n  # Изначально ранг каждого узла равен 0
        
        # Функция для поиска корня дерева
        def find(node):
            if parent[node] != node:  # Если текущий узел не является корнем своего дерева
                parent[node] = find(parent[node])  # Сжимаем путь к корню
            return parent[node]  # Возвращаем корень дерева
        
        # Функция для объединения двух множеств
        def union(node1, node2):
            root1 = find(node1)  # Находим корень первого узла
            root2 = find(node2)  # Находим корень второго узла
            if root1 != root2:  # Если корни разные, значит узлы принадлежат разным множествам
                if rank[root1] < rank[root2]:  # Если ранг первого дерева меньше ранга второго
                    parent[root1] = root2  # Первое дерево становится поддеревом второго
                elif rank[root1] > rank[root2]:  # Если ранг второго дерева меньше ранга первого
                    parent[root2] = root1  # Второе дерево становится поддеревом первого
                else:  # Если ранги деревьев равны
                    parent[root2] = root1  # Второе дерево становится поддеревом первого
                    rank[root1] += 1  # Ранг первого дерева увеличивается на 1
        
        # Обходим матрицу смежности
        for i in range(n):
            for j in range(i + 1, n):  # Обходим только верхнюю треугольную матрицу, чтобы не дублировать операции
                if isConnected[i][j] == 1:  # Если города напрямую связаны
                    union(i, j)  # Объединяем их множества
        
        # Считаем количество различных групп (провинций)
        provinces = set()
        for i in range(n):
            provinces.add(find(i))  # Добавляем корень каждого узла в множество
        
        return len(provinces)  # Возвращаем количество уникальных корней (провинций)